*****************************************
DCC: detect circRNAs from chimeric reads
*****************************************

DCC is a python package intended to detect and quantify circRNAs with high specificity. DCC works with the STAR (Dobin et al., 2013) ``chimeric.out.junction``
files which contains chimerically aligned reads including circRNA junction spanning reads.

=============
Installation
=============

DCC dependes on pysam, pandas, numpy, and HTSeq.
The installation process of DCC will automatically check for the dependencies and, if any dependency is missing will it be automatically installed.

Different installation options are available:

1) Download the most current DCC release: `DCC release <https://github.com/dieterich-lab/DCC/releases>`_

.. code-block:: bash

 $ tar -xvf DCC-<version>.tar.gz

 $ cd DCC-<version>

 $ python setup.py install

2) git clone

.. code-block:: bash

  $ git clone git@github.com:dieterich-lab/DCC.git

  $ cd DCC

  $ python setup.py install

Check the installation:

.. code-block:: bash

  $ DCC --version

If the python installation binary path [e.g. $HOME/.local/bin for Ubuntu] is not included in your path, it is also possible run DCC directly:

.. code-block:: bash

  $ python <DCC directory>/scripts/DCC <Options>

  or even

  $ python <DCC directory>/DCC/main.py <Options>


========
Usage
========
The detection of circRNAs from RNAseq data through DCC can be summarised by three steps:

1. Map RNAseq data from quality checked fastq files. For paired end data, it is recommended to map with two pairs jointly, and also separately. This is because STAR does not output reads or read pairs which have more than one chimeric junction.

2. Prepare the input files required by DCC. In summary, only one file is mandatory: ``samplesheet``, which specifies the locations for the ``chimeric.out.junction`` files (one relative or absolute path per line).

3. ``Repetitive_regions.gtf``, a GTF format annotation of repetitive regions, which is used to filter out circRNA candidates from repetitive regions. 2).

4. For paired end sequencing, ``mate1`` and ``mate2``, which specify where your ``chimeric.out.junction`` files from mate separate mapping are.

5. You may specify the location of the BAM files via the -B flag (e.g. -B @bam_files.txt) otherwise DCC tries to guess where they are.

6. DCC assumes that the SJ.out.tab files generated by STAR are in the same folder than the BAM files.

7. DCC can be run for different purpose with different modes. In summary

 1) Run DCC to detect circRNAs and host gene expression (use -D and -G option )
 2) Run DCC only to detect circRNAs (use -D option only).

========================
Step by step tutorial
========================
In this tutorial, we use `Westholm et al. 2014 <http://www.sciencedirect.com/science/article/pii/S2211124714009310>`_  data as an example. The data are paired end, stranded RiboMinus RNAseq data from *Drosophila melanogaster*, consisting of samples of 3 developmental stages (1days, 4days and 20days) collected from heads. You can download the data as fastq files with NCBI SRA accession number: SRP001696.

1. Map RNA-seq data with `STAR <https://github.com/alexdobin/STAR>`_ (Dobin et al., 2013). Note that ``--alignSJoverhangMin`` and ``--chimJunctionOverhangMin`` should use the same value, to make the circRNA expression and linear gene expression level comparable.

* Do pairs joined mapping first. If your data are paired end, do additional mates separate mapping (not mandatory, but will increase the sensitivity of DCC detection, because it collect small circRNAs which appear with one chimeric junction point at each read mate). If the data is single end, only one mapping step is needed. In this case, we have PE sequencing data.

.. code-block:: bash

  $ mkdir Sample1
  $ cd Sample1
  $ STAR --runThreadN 10   --genomeDir [genome]  --outSAMtype BAM SortedByCoordinate --readFilesIn Sample1_1.fastq.gz  Sample1_2.fastq.gz   --readFilesCommand zcat  --outFileNamePrefix [sample prefix] --outReadsUnmapped Fastx  --outSJfilterOverhangMin 15 15 15 15 --alignSJoverhangMin 15 --alignSJDBoverhangMin 15 --outFilterMultimapNmax 20   --outFilterScoreMin 1   --outFilterMatchNmin 1   --outFilterMismatchNmax 2  --chimSegmentMin 15    --chimScoreMin 15   --chimScoreSeparation 10  --chimJunctionOverhangMin 15


* (Skip when you have single end data). Mates separate mapping. Be careful that, what you define as first mate (mate1) should also appears the first in the joined mapping. In this case, SamplePairedRead_1.fastq.gz is the first mate which came first above.

.. code-block:: bash

  # Create a directory for mate1
  $ mkdir mate1
  $ STAR --runThreadN 10   --genomeDir [genome]  --outSAMtype None --readFilesIn Sample1_1.fastq.gz  --readFilesCommand zcat   --outFileNamePrefix [sample prefix] --outReadsUnmapped Fastx  --outSJfilterOverhangMin 15 15 15 15 --alignSJoverhangMin 15 --alignSJDBoverhangMin 15 --seedSearchStartLmax 30  --outFilterMultimapNmax 20   --outFilterScoreMin 1   --outFilterMatchNmin 1   --outFilterMismatchNmax 2  --chimSegmentMin 15    --chimScoreMin 15   --chimScoreSeparation 10  --chimJunctionOverhangMin 15

  $ cd ..
  $ mkdir mate2
  # Do the same mapping as mate1 for mate2

2. Detect circRNAs from ``chimeric.out.junction`` files with DCC

- It is strongly recommended to specify a repetitive region file in GTF format for filtering. You can obtain this file through the `UCSC table browser <http://genome.ucsc.edu/cgi-bin/hgTables>`_ . Select your genome, select group as "Repeats" or "Variation and Repeats". For the track, we recommend choose RepeatMasker and Simple Repeats and combine the results. **NOTE**: the output file needs to comply with GTF format specification. Also note the name of chromosomes from different databases differs, e.g. "1" for chromosome 1 from ENSEMBL, whereas "chr1" for chromosome 1 from UCSC. You need to have the same chromosome names for your gtf annotation file and repeats file. An example to convert UCSC chromosome to ENSEMBL would be ``sed -i 's/^chr//g' your_repeatfile.gtf``.

- Prepare path files to specify where is your chimeric.junction.out files are.

  First, ``samplesheet`` file, in which you specify your ``chimeric.out.junction`` file's absolute paths (mates joined mapping ``chimeric.out.junction`` files, for paired end data), one line per sample.

  Second (only if you have paired end sequencing data), ``mate1`` and ``mate2`` files. As with the ``samplesheet`` file, you specify where your mate1 and mate2 separately mapped  ``chimeric.out.junction`` files are.

  You can find a example of this files for Westholm et al. data at:

.. code-block:: bash

  $ <DCC directory>/DCC/data/samplesheet # Mates jointly mapped chimeric.junction.out files
  $ <DCC directory>/DCC/data/mate1 # Mate1 independently mapped chimeric.junction.out files
  $ <DCC directory>/DCC/data/mate1 # Mate2 independently mapped chimeric.junction.out files

- After all the preparation steps, you can now run DCC for circRNA detection.


.. code-block:: bash

  # Call DCC to detect circRNAs, using Westholm data as example.
  $ DCC @samplesheet -mt1 @mate1 -mt2 @mate2 -D -R [Repeats].gtf -an [Annotation].gtf -Pi -F -M -Nr 5 6 -fg -G -A [Reference].fa

  # For single end, non-strand data:
  $ DCC @samplesheet -D -R [Repeats].gtf -an [Annotation].gtf -F -M -Nr 5 6 -fg -G -A [Reference].fa

  $ DCC @samplesheet -mt1 @mate1 -mt2 @mate2 -D -S -R [Repeats].gtf -an [Annotation].gtf -Pi -F -M -Nr 5 6 -fg

  # For details on the parameters please refer to the help page of DCC:
  $ DCC -h

By default, DCC assume the data are stranded, for non-stranded data, use -N flag.
NOTE: -F flag is mandatory, if you want to filter on the results. All filtering steps are not mandatory, but strongly recommended.

========================
DCC generated output
========================

The output of DCC includes the following files: CircRNACount, CircCoordinates, LinearCount and CircSkipJunctions.

**CircRNACount:** a table containing read counts for circRNAs detected. First three columns are chr, circRNA start, circRNA end. From fourth column on are the circRNA read counts, one sample per column, shown in the order given in your samplesheet.

**CircCoordinates:** CircRNA annotation in BED format. The columns are chr, start, end, genename, junctiontype (based on STAR; 0: non-canonical; 1: GT/AG, 2: CT/AC, 3: GC/AG, 4: CT/GC, 5: AT/AC, 6: GT/AT), strand, circRNA region (startregion-endregion), overall regions (the genomic features circRNA coordinates interval covers).

**LinearCount:** host gene expression count table, same setup with CircRNACount file.

**CircSkipJunctions:** CircSkip junctions. First three columns are the same with LinearCount/CircRNACount, the rest columns are circSkip junctions found for each sample. circSkip junction shows in the format: chr:start-end:count (chr1:1787-6949:10 for example. It's possible that for one circRNA multiple circSkip junctions are found, because circRNA possible come from multiple RNA isoforms. In this case, multiple circSkip junctions are delimited with semicolon). 0 implies no circSkip junction found for this circRNA.

========================================================================
Test for host-independently regulated circRNAs with CircTest package
========================================================================

1) Install `CircTest <https://github.com/dieterich-lab/CircTest>`_ package as described:

2) Read and load DCC output into R

.. code-block:: R

  library(CircTest)

  CircRNACount <- read.delim('CircRNACount',header=T)
  LinearCount <- read.delim('LinearCount',header=T)
  CircCoordinates <- read.delim('CircCoordinates',header=T)

  CircRNACount_filtered <- Circ.filter(circ = CircRNACount, linear = LinearCount, Nreplicates = 6, filter.sample = 6, filter.count = 5, percentage = 0.1)
  CircCoordinates_filtered <- CircCoordinates[rownames(CircRNACount_filtered),]
  LinearCount_filtered <- LinearCount[rownames(CircRNACount_filtered),]

Alternatively, load the processed Westholm et al. data from CircTest package.

.. code-block:: R

  library(CircTest)

  data(Circ)
  CircRNACount_filtered <- Circ
  data(Coordinates)
  CircCoordinates_filtered <- Coordinates
  data(Linear)
  LinearCount_filtered <- Linear

3) Test for host-independently regulated circRNAs

.. code-block:: R

 test=Circ.test(CircRNACount_filtered,LinearCount_filtered,CircCoordinates_filtered,group=c(rep(1,6),rep(2,6),rep(3,6)))
 # Significant result show in a summary table
 View(test$summary_table)

4) Visualize the significantly host-independently regulated circRNAs

.. code-block:: R

 for (i in rownames(test$summary_table))  {
  Circ.ratioplot( CircRNACount_filtered, LinearCount_filtered, CircCoordinates_filtered, plotrow=i,
                  groupindicator1=c(rep('1days',6),rep('4days',6),rep('20days',6)),
                  lab_legend='Ages' )
 }


====================================
In case of errors or other problems
====================================

In case of any problems, please do not hesitate to open an issue here on GitHub: `Create an issue <https://github.com/dieterich-lab/DCC/issues/new>`_